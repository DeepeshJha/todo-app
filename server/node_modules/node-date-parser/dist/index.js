"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
class DateParser {
    /**
     * Instantiating a DateParser object.
     *
     * @param locale Language Settings to use. Defaults to "en"
     */
    constructor(locale = "en") {
        try {
            this.locale = this.loadLocale(locale);
        }
        catch (error) {
            throw `DateParser Failed to load locale '${locale}'!`;
        }
    }
    /**
     * Loading a locale file
     * @param locale The locale to load
     * @returns The locale json as DateParserLocale
     */
    loadLocale(locale) {
        return JSON.parse(fs_1.default.readFileSync(path_1.default.join(__dirname, "locale", `${locale}.json`), { encoding: "utf-8" }));
    }
    /**
     * Capitalize a string
     * @param string The string to capitalize
     * @returns The capitalized string
     */
    capitalize(string) {
        return string.charAt(0).toUpperCase() + string.substring(1);
    }
    /**
     * Load a custom locale json to use
     * @param customLocaleJson Custom locale json file
     */
    loadCustomLocale(customLocaleJson) {
        this.locale = customLocaleJson;
    }
    /**
     * Parsing a date to string using a formatter string
     * @param format The output format of the date
     * @param date The date object
     * @returns a date string formatted according to the input format string.
     */
    parse(format, date = new Date()) {
        let formatted = [];
        for (let i = 0; i < format.length; i++) {
            const char = format.charAt(i);
            if (char in this) {
                formatted.push(this[char](date));
            }
            else {
                formatted.push(char);
            }
        }
        return formatted.join("");
    }
    /**
     * Day of the month, 2 digits with leading zeros
     * Example: 01 to 31
     *
     * @param date The date object to use
     * @returns Day of the month, 2 digits with leading zeros.
     */
    d(date = new Date()) {
        const day = date.getDate().toString();
        return day.length === 1 ? `0${day}` : day;
    }
    /**
     * A textual representation of a day, short.
     * Example: mon through sun
     *
     * @param date The date object to use
     * @returns A textual representation of a day, short
     */
    D(date = new Date()) {
        return this.locale.day.short[date.getDay()].toLowerCase();
    }
    /**
     * A textual representation of a day, short, capitalized.
     * Example: Mon through Sun
     *
     * @param date The date object to use
     * @returns A textual representation of a day, short, capitalized
     */
    E(date = new Date()) {
        return this.capitalize(this.D(date));
    }
    /**
     * A textual representation of a day, short, uppercase.
     * Example: MON through SUN
     *
     * @param date The date object to use
     * @returns A textual representation of a day, short, uppercase
     */
    e(date = new Date()) {
        return this.D(date).toUpperCase();
    }
    /**
     * Day of the month without leading zeros
     * Example: 1 to 31
     *
     * @param date The date object to use
     * @returns Day of the month without leading zeros
     */
    j(date = new Date()) {
        return date.getDate().toString();
    }
    /**
     * A full textual representation of the day of the week, lowercase.
     * Example: monday through sunday
     *
     * @param date The date object to use
     * @returns A full textual representation of the day of the week, lowercase
     */
    l(date = new Date()) {
        return this.locale.day.full[date.getDay()].toLowerCase();
    }
    /**
     * A full textual representation of the day of the week, capitalized.
     * Example: Monday through Sunday
     *
     * @param date The date object to use
     * @returns A full textual representation of the day of the week, capitalized
     */
    K(date = new Date()) {
        return this.capitalize(this.l(date));
    }
    /**
     * ISO 8601 numeric representation of the day of the week
     * Example: 1 (for Monday) through 7 (for Sunday)
     *
     * @param date The date object to use
     * @returns ISO 8601 numeric representation of the day of the week
     */
    N(date = new Date()) {
        return date.getDay().toString();
    }
    /**
     * Numeric representation of the day of the week
     * Example: 0 (for Sunday) through 6 (for Saturday)
     *
     * @param date The date object to use
     * @returns Numeric representation of the day of the week
     */
    w(date = new Date()) {
        return date.getDay().toString();
    }
    /**
     * The day of the year (starting from 0)
     * Example: 0 through 365
     *
     * @param date The date object to use
     * @returns The day of the year (starting from 0)
     */
    z(date = new Date()) {
        const start = new Date(date.getFullYear(), 0, 0);
        const diff = (+date - +start) + ((start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000);
        const oneDay = 1000 * 60 * 60 * 24;
        return Math.floor(diff / oneDay).toString();
    }
    /**
     * ISO 8601 week number of year, weeks starting on Monday
     * Example: 42 (the 42nd week in the year)
     *
     * @param date The date object to use
     * @returns ISO 8601 week number of year, weeks starting on Monday
     */
    W(date = new Date()) {
        date = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
        date.setUTCDate(date.getUTCDate() + 4 - (date.getUTCDay() || 7));
        var yearStart = new Date(Date.UTC(date.getUTCFullYear(), 0, 1));
        var weekNo = Math.ceil((((+date - +yearStart) / 86400000) + 1) / 7);
        return weekNo.toString();
    }
    /**
     * A full textual representation of a month, such as january or march, lowercase.
     * Example: january through december
     *
     * @param date The date object to use
     * @returns A full textual representation of a month, such as january or march, lowercase.
     */
    F(date = new Date()) {
        return this.locale.month.full[date.getMonth()].toLowerCase();
    }
    /**
     * A full textual representation of a month, such as January or March, capitalized.
     * Example: january through december
     *
     * @param date The date object to use
     * @returns A full textual representation of a month, such as January or March, capitalized.
     */
    f(date = new Date()) {
        return this.capitalize(this.F(date));
    }
    /**
     * Numeric representation of a month, with leading zeros
     * Example: 01 through 12
     *
     * @param date The date object to use
     * @returns Numeric representation of a month, with leading zeros
     */
    m(date = new Date()) {
        const month = date.getMonth() + 1;
        return month < 10 ? `0${month}` : month.toString();
    }
    /**
     * A short textual representation of a month, short, lowercase
     * Example: jan through dec
     *
     * @param date The date object to use
     * @returns A short textual representation of a month, short, lowercase
     */
    M(date = new Date()) {
        return this.locale.month.short[date.getMonth()].toLowerCase();
    }
    /**
     * Numeric representation of a month, without leading zeros
     * Example: 1 through 12
     *
     * @param date The date object to use
     * @returns Numeric representation of a month, without leading zeros
     */
    n(date = new Date()) {
        return (date.getMonth() + 1).toString();
    }
    /**
     * Number of days in the given month
     * Example: 28 through 31
     *
     * @param date The date object to use
     * @returns Number of days in the given month
     */
    t(date = new Date()) {
        return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate().toString();
    }
    /**
     * Whether it's a leap year
     * Example: 1 if it is a leap year, 0 otherwise.
     *
     * @param date The date object to use
     * @returns Whether it's a leap year
     */
    L(date = new Date()) {
        return (((date.getFullYear() % 4 === 0) && (date.getFullYear() % 100 != 0)) || (date.getFullYear() % 400 === 0)) ? "1" : "0";
    }
    /**
     * A full numeric representation of a year, 4 digits
     * Example: 1999 or 2003
     *
     * @param date The date object to use
     * @returns A full numeric representation of a year, 4 digits
     */
    Y(date = new Date()) {
        return date.getFullYear().toString();
    }
    /**
     * A two digit representation of a year
     * Example: 99 or 03
     *
     * @param date The date object to use
     * @returns A two digit representation of a year
     */
    y(date = new Date()) {
        return date.getFullYear().toString().slice(-2);
    }
    /**
     * Ante meridiem and Post meridiem, lowercase
     * Example: am or pm
     *
     * @param date The date object to use
     * @returns Ante meridiem and Post meridiem, lowercase
     */
    a(date = new Date()) {
        return date.getHours() < 12 ? this.locale.meridiem.short[0].toLowerCase() : this.locale.meridiem.short[1].toLowerCase();
    }
    /**
     * Ante meridiem and Post meridiem, capitalized
     * Example: Am or Pm
     *
     * @param date The date object to use
     * @returns Ante meridiem and Post meridiem, capitalized
     */
    A(date = new Date()) {
        return this.capitalize(this.a(date));
    }
    /**
     * Ante meridiem and Post meridiem, uppercase
     * Example: AM or PM
     *
     * @param date The date object to use
     * @returns Ante meridiem and Post meridiem, uppercase
     */
    B(date = new Date()) {
        return this.a(date).toUpperCase();
    }
    /**
     * Ante meridiem and Post meridiem, uppercase
     * Example: ante meridiem or post meridiem
     *
     * @param date The date object to use
     * @returns Ante meridiem and Post meridiem, uppercase
     */
    c(date = new Date()) {
        return date.getHours() < 12 ? this.locale.meridiem.full[0].toLowerCase() : this.locale.meridiem.full[1].toLowerCase();
    }
    /**
     * Ante meridiem and Post meridiem, capitalized
     * Example: Ante meridiem or Post meridiem
     *
     * @param date The date object to use
     * @returns Ante meridiem and Post meridiem, capitalized
     */
    C(date = new Date()) {
        return this.capitalize(this.c(date));
    }
    /**
     * 12-hour format of an hour without leading zeros
     * Example: 1 through 12
     *
     * @param date The date object to use
     * @returns 12-hour format of an hour without leading zeros
     */
    g(date = new Date()) {
        const hour = date.getHours();
        return hour < 12 ? hour.toString() : (hour - 12).toString();
    }
    /**
     * 24-hour format of an hour without leading zeros
     * Example: 0 through 23
     *
     * @param date The date object to use
     * @returns 24-hour format of an hour without leading zeros
     */
    G(date = new Date()) {
        return date.getHours().toString();
    }
    /**
     * 12-hour format of an hour with leading zeros
     * Example: 01 through 12
     *
     * @param date The date object to use
     * @returns 12-hour format of an hour with leading zeros
     */
    h(date = new Date()) {
        const hour = this.g(date);
        return hour.length === 1 ? `0${hour}` : hour;
    }
    /**
     * 24-hour format of an hour with leading zeros
     * Example: 00 through 23
     *
     * @param date The date object to use
     * @returns 24-hour format of an hour with leading zeros
     */
    H(date = new Date()) {
        const hour = this.G(date);
        return hour.length === 1 ? `0${hour}` : hour;
    }
    /**
     * Minutes with leading zeros
     * Example: 00 to 59
     *
     * @param date The date object to use
     * @returns Minutes with leading zeros
     */
    i(date = new Date()) {
        const minute = date.getMinutes().toString();
        return minute.length === 1 ? `0${minute}` : minute;
    }
    /**
     * Minutes without leading zeros
     * Example: 0 to 59
     *
     * @param date The date object to use
     * @returns Minutes without leading zeros
     */
    I(date = new Date()) {
        return date.getMinutes().toString();
    }
    /**
     * Seconds with leading zeros.
     * Example: 00 through 59
     *
     * @param date The date object to use
     * @returns Seconds with leading zeros.
     */
    s(date = new Date()) {
        const second = date.getSeconds().toString();
        return second.length === 1 ? `0${second}` : second;
    }
    /**
     * Seconds without leading zeros.
     * Example: 0 through 59
     *
     * @param date The date object to use
     * @returns Seconds without leading zeros.
     */
    S(date = new Date()) {
        return date.getSeconds().toString();
    }
    /**
     * Milliseconds.
     * Example: 15 or 654
     *
     * @param date The date object to use
     * @returns Milliseconds.
     */
    v(date = new Date()) {
        return date.getMilliseconds().toString();
    }
    /**
     * Milliseconds, 3 digits.
     * Example: 015 or 654
     *
     * @param date The date object to use
     * @returns Milliseconds, 3 digits.
     */
    V(date = new Date()) {
        const millisecond = this.v(date);
        if (millisecond.length === 1) {
            return `00${millisecond}`;
        }
        else if (millisecond.length === 2) {
            return `0${millisecond}`;
        }
        else {
            return millisecond;
        }
    }
    /**
     * Seconds since the Unix Epoch
     * Example: 1639714248
     *
     * @param date The date object to use
     * @returns Seconds since the Unix Epoch
     */
    U(date = new Date()) {
        return Math.floor(+date / 1000).toString();
    }
}
exports.default = DateParser;
