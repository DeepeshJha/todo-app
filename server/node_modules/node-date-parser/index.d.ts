declare module 'node-date-parser/index' {
  import { DateParserLocale } from 'node-date-parser/interface/DateParserLocale';
  export default class DateParser {
      [key: string]: any;
      private locale;
      /**
       * Instantiating a DateParser object.
       *
       * @param locale Language Settings to use. Defaults to "en"
       */
      constructor(locale?: string);
      /**
       * Loading a locale file
       * @param locale The locale to load
       * @returns The locale json as DateParserLocale
       */
      private loadLocale;
      /**
       * Capitalize a string
       * @param string The string to capitalize
       * @returns The capitalized string
       */
      private capitalize;
      /**
       * Load a custom locale json to use
       * @param customLocaleJson Custom locale json file
       */
      loadCustomLocale(customLocaleJson: DateParserLocale): void;
      /**
       * Parsing a date to string using a formatter string
       * @param format The output format of the date
       * @param date The date object
       * @returns a date string formatted according to the input format string.
       */
      parse(format: string, date?: Date): string;
      /**
       * Day of the month, 2 digits with leading zeros
       * Example: 01 to 31
       *
       * @param date The date object to use
       * @returns Day of the month, 2 digits with leading zeros.
       */
      private d;
      /**
       * A textual representation of a day, short.
       * Example: mon through sun
       *
       * @param date The date object to use
       * @returns A textual representation of a day, short
       */
      private D;
      /**
       * A textual representation of a day, short, capitalized.
       * Example: Mon through Sun
       *
       * @param date The date object to use
       * @returns A textual representation of a day, short, capitalized
       */
      private E;
      /**
       * A textual representation of a day, short, uppercase.
       * Example: MON through SUN
       *
       * @param date The date object to use
       * @returns A textual representation of a day, short, uppercase
       */
      private e;
      /**
       * Day of the month without leading zeros
       * Example: 1 to 31
       *
       * @param date The date object to use
       * @returns Day of the month without leading zeros
       */
      private j;
      /**
       * A full textual representation of the day of the week, lowercase.
       * Example: monday through sunday
       *
       * @param date The date object to use
       * @returns A full textual representation of the day of the week, lowercase
       */
      private l;
      /**
       * A full textual representation of the day of the week, capitalized.
       * Example: Monday through Sunday
       *
       * @param date The date object to use
       * @returns A full textual representation of the day of the week, capitalized
       */
      private K;
      /**
       * ISO 8601 numeric representation of the day of the week
       * Example: 1 (for Monday) through 7 (for Sunday)
       *
       * @param date The date object to use
       * @returns ISO 8601 numeric representation of the day of the week
       */
      private N;
      /**
       * Numeric representation of the day of the week
       * Example: 0 (for Sunday) through 6 (for Saturday)
       *
       * @param date The date object to use
       * @returns Numeric representation of the day of the week
       */
      private w;
      /**
       * The day of the year (starting from 0)
       * Example: 0 through 365
       *
       * @param date The date object to use
       * @returns The day of the year (starting from 0)
       */
      private z;
      /**
       * ISO 8601 week number of year, weeks starting on Monday
       * Example: 42 (the 42nd week in the year)
       *
       * @param date The date object to use
       * @returns ISO 8601 week number of year, weeks starting on Monday
       */
      private W;
      /**
       * A full textual representation of a month, such as january or march, lowercase.
       * Example: january through december
       *
       * @param date The date object to use
       * @returns A full textual representation of a month, such as january or march, lowercase.
       */
      private F;
      /**
       * A full textual representation of a month, such as January or March, capitalized.
       * Example: january through december
       *
       * @param date The date object to use
       * @returns A full textual representation of a month, such as January or March, capitalized.
       */
      private f;
      /**
       * Numeric representation of a month, with leading zeros
       * Example: 01 through 12
       *
       * @param date The date object to use
       * @returns Numeric representation of a month, with leading zeros
       */
      private m;
      /**
       * A short textual representation of a month, short, lowercase
       * Example: jan through dec
       *
       * @param date The date object to use
       * @returns A short textual representation of a month, short, lowercase
       */
      private M;
      /**
       * Numeric representation of a month, without leading zeros
       * Example: 1 through 12
       *
       * @param date The date object to use
       * @returns Numeric representation of a month, without leading zeros
       */
      private n;
      /**
       * Number of days in the given month
       * Example: 28 through 31
       *
       * @param date The date object to use
       * @returns Number of days in the given month
       */
      private t;
      /**
       * Whether it's a leap year
       * Example: 1 if it is a leap year, 0 otherwise.
       *
       * @param date The date object to use
       * @returns Whether it's a leap year
       */
      private L;
      /**
       * A full numeric representation of a year, 4 digits
       * Example: 1999 or 2003
       *
       * @param date The date object to use
       * @returns A full numeric representation of a year, 4 digits
       */
      private Y;
      /**
       * A two digit representation of a year
       * Example: 99 or 03
       *
       * @param date The date object to use
       * @returns A two digit representation of a year
       */
      private y;
      /**
       * Ante meridiem and Post meridiem, lowercase
       * Example: am or pm
       *
       * @param date The date object to use
       * @returns Ante meridiem and Post meridiem, lowercase
       */
      private a;
      /**
       * Ante meridiem and Post meridiem, capitalized
       * Example: Am or Pm
       *
       * @param date The date object to use
       * @returns Ante meridiem and Post meridiem, capitalized
       */
      private A;
      /**
       * Ante meridiem and Post meridiem, uppercase
       * Example: AM or PM
       *
       * @param date The date object to use
       * @returns Ante meridiem and Post meridiem, uppercase
       */
      private B;
      /**
       * Ante meridiem and Post meridiem, uppercase
       * Example: ante meridiem or post meridiem
       *
       * @param date The date object to use
       * @returns Ante meridiem and Post meridiem, uppercase
       */
      private c;
      /**
       * Ante meridiem and Post meridiem, capitalized
       * Example: Ante meridiem or Post meridiem
       *
       * @param date The date object to use
       * @returns Ante meridiem and Post meridiem, capitalized
       */
      private C;
      /**
       * 12-hour format of an hour without leading zeros
       * Example: 1 through 12
       *
       * @param date The date object to use
       * @returns 12-hour format of an hour without leading zeros
       */
      private g;
      /**
       * 24-hour format of an hour without leading zeros
       * Example: 0 through 23
       *
       * @param date The date object to use
       * @returns 24-hour format of an hour without leading zeros
       */
      private G;
      /**
       * 12-hour format of an hour with leading zeros
       * Example: 01 through 12
       *
       * @param date The date object to use
       * @returns 12-hour format of an hour with leading zeros
       */
      private h;
      /**
       * 24-hour format of an hour with leading zeros
       * Example: 00 through 23
       *
       * @param date The date object to use
       * @returns 24-hour format of an hour with leading zeros
       */
      private H;
      /**
       * Minutes with leading zeros
       * Example: 00 to 59
       *
       * @param date The date object to use
       * @returns Minutes with leading zeros
       */
      private i;
      /**
       * Minutes without leading zeros
       * Example: 0 to 59
       *
       * @param date The date object to use
       * @returns Minutes without leading zeros
       */
      private I;
      /**
       * Seconds with leading zeros.
       * Example: 00 through 59
       *
       * @param date The date object to use
       * @returns Seconds with leading zeros.
       */
      private s;
      /**
       * Seconds without leading zeros.
       * Example: 0 through 59
       *
       * @param date The date object to use
       * @returns Seconds without leading zeros.
       */
      private S;
      /**
       * Milliseconds.
       * Example: 15 or 654
       *
       * @param date The date object to use
       * @returns Milliseconds.
       */
      private v;
      /**
       * Milliseconds, 3 digits.
       * Example: 015 or 654
       *
       * @param date The date object to use
       * @returns Milliseconds, 3 digits.
       */
      private V;
      /**
       * Seconds since the Unix Epoch
       * Example: 1639714248
       *
       * @param date The date object to use
       * @returns Seconds since the Unix Epoch
       */
      private U;
  }

}
declare module 'node-date-parser/interface/DateParserLocale' {
  export interface DateParserLocale {
      month: {
          full: string[];
          short: string[];
      };
      day: {
          full: string[];
          short: string[];
      };
      meridiem: {
          full: string[];
          short: string[];
      };
  }

}
declare module 'node-date-parser' {
  import main = require('node-date-parser/index');
  export = main;
}